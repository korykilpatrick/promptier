---
description: Reference these documents when doing anything pertaining to the extension frontend
globs: 
---
================================================
File: docs/references/chrome-extension/add-react-router.mdx
================================================
---
title: Add React Router to your Clerk-powered Chrome Extension
description: Learn how to add React Router to your React app using their Data API router.
---

<TutorialHero
  exampleRepo={[
    {
      title: "Clerk Chrome Extension Repo",
      link: "https://github.com/clerk/clerk-chrome-extension-quickstart"
    }
  ]}
  beforeYouStart={[
    {
      title: "Set up a Clerk application",
      link: "/docs/quickstarts/setup-clerk",
      icon: "clerk"
    },
    {
      title: "Add auth and user management to your Chrome Extension with Clerk",
      link: "/docs/quickstarts/chrome-extension",
      icon: "react"
    },
  ]}
>
  - Install `react-router-dom`
  - Create components for your routes
  - Create layouts
  - Wire layouts and routes up with `createMemoryRouter`
</TutorialHero>

This tutorial demonstrates how to integrate React Router into your Chrome Extension application.

<Steps>
  ## Install `react-router-dom`

  React Router is a lightweight, fully-featured routing library. To install it in your project, run the following command:

  ```bash {{ filename: 'terminal' }}
  pnpm add react-router-dom
  ```

  > [!IMPORTANT]
  > This guide assumes you're using Plasmo to build your Chrome Extension, so you must use `pnpm` as your package manager.

  ## Create routes

  1. In the `src/` directory, create a `popup/` directory.
  1. In the `popup/` directory, create a `routes/` directory.
  1. In the `routes/` directory, create the `home.tsx`, `sign-in.tsx`, `sign-up.tsx`, and `settings.tsx` files.
  1. Use the following tabs to view the code necessary for each file.

  <CodeBlockTabs options={["Home", "Sign-in", "Sign-up", "Settings"]}>
    ```tsx {{ filename: 'src/popup/routes/home.tsx' }}
    export const Home = () => {
      return (
        <>
          <h1>Clerk + Chrome Extension + React Router</h1>
        </>
      )
    }
    ```

    ```tsx {{ filename: 'src/popup/routes/sign-in.tsx' }}
    import { SignIn } from '@clerk/chrome-extension'

    export const SignInPage = () => {
      return (
        <>
          <p>Sign In</p>
          <SignIn routing="virtual" />
        </>
      )
    }
    ```

    ```tsx {{ filename: 'src/popup/routes/sign-up.tsx' }}
    import { SignUp } from '@clerk/chrome-extension'

    export const SignUpPage = () => {
      return (
        <>
          <p>Sign Up</p>
          <SignUp routing="virtual" />
        </>
      )
    }
    ```

    ```tsx {{ filename: 'src/popup/routes/settings.tsx' }}
    import { UserProfile } from '@clerk/chrome-extension'

    export const Settings = () => {
      return (
        <>
          <h1>Settings</h1>
          <UserProfile routing="virtual" />
        </>
      )
    }
    ```
  </CodeBlockTabs>

  ## Create layouts

  1. Delete your `src/popup.tsx` file.
  1. In your `src/popup/` directory, create a `layouts/` directory.
  1. In the `layouts/` directory, create a `root-layout.tsx` file.
  1. In the `root-layout.tsx` file, paste the following code to create a layout for your app.
     - The layout contains an [`<Outlet />`](mdc:https:/reactrouter.com/en/main/components/outlet) component from `react-router-dom`. This behaves similar to `{children}` in Next.js or more generic React components.
     - The footer includes Clerk's [`<UserButton />`](mdc:docs/components/user/user-button) component and a link to the `/settings` page, which renders Clerk's [`<UserProfile />`](mdc:docs/components/user/user-profile) component. Clerk's [`<SignedIn>`](mdc:docs/components/control/signed-in) and [`<SignedOut>`](mdc:docs/components/control/signed-out) control components determine what's displayed based on the user's authentication state.

  <CodeBlockTabs options={["Root Layout"]}>
    ```tsx {{ filename: 'src/popup/layouts/root-layout.tsx' }}
    import { Link, Outlet, useNavigate } from 'react-router-dom'
    import { ClerkProvider, SignedIn, SignedOut, UserButton } from '@clerk/chrome-extension'

    const PUBLISHABLE_KEY = process.env.PLASMO_PUBLIC_CLERK_PUBLISHABLE_KEY

    if (!PUBLISHABLE_KEY) {
      throw new Error('Please add the PLASMO_PUBLIC_CLERK_PUBLISHABLE_KEY to the .env.development file')
    }

    export const RootLayout = () => {
      const navigate = useNavigate()

      return (
        <ClerkProvider
          routerPush={(to) => navigate(to)}
          routerReplace={(to) => navigate(to, { replace: true })}
          publishableKey={PUBLISHABLE_KEY}
          afterSignOutUrl="/"
        >
          <div className="plasmo-w-[785px] plasmo-h-[600px]">
            <main>
              <Outlet />
            </main>
            <footer>
              <SignedIn>
                <Link to="/settings">Settings</Link>
                <UserButton />
              </SignedIn>
              <SignedOut>
                <Link to="/">Home</Link>
                <Link to="/sign-in">Sign In</Link>
                <Link to="/sign-up">Sign Up</Link>
              </SignedOut>
            </footer>
          </div>
        </ClerkProvider>
      )
    }
    ```
  </CodeBlockTabs>

  ## Configure layouts and routes with `createMemoryRouter`

  [React Router's `createMemoryRouter`](mdc:https:/reactrouter.com/en/main/routers/create-memory-router) is a router that uses memory to store the state of the router instead of the browser's history. This is useful for creating a router in a non-browser environment like a Chrome Extension.

  1. In the `src/popup/` directory, create an `index.tsx` file.
  1. In the `index.tsx` file, paste the following code to configure your routes with `createMemoryRouter`.

  ```ts {{ filename: 'src/popup/index.tsx' }}
  import React from 'react'

  import '../style.css'

  import { createMemoryRouter, RouterProvider } from 'react-router-dom'

  import { RootLayout } from './layouts/root-layout'
  import { Home } from './routes/home'
  import { Settings } from './routes/settings'
  import { SignInPage } from './routes/sign-in'
  import { SignUpPage } from './routes/sign-up'

  const router = createMemoryRouter([
    {
      // Wraps the entire app in the root layout
      element: <RootLayout />,
      // Mounted where the <Outlet /> component is inside the root layout
      children: [
        { path: '/', element: <Home /> },
        { path: '/sign-in', element: <SignInPage /> },
        { path: '/sign-up', element: <SignUpPage /> },
        { path: '/settings', element: <Settings /> },
      ],
    },
  ])

  export default function PopupIndex() {
    return <RouterProvider router={router} />
  }
  ```

  ## Test the integration

  1. Run your project with the following command:
     ```bash {{ filename: 'terminal' }}
     pnpm dev
     ```
  1. In your Chrome browser, open the extension popup. Ensure that the home page displays with a footer containing the **Home**, **Sign In**, and **Sign Up** links.
  1. Visit the **Sign Up** link and ensure the `<SignUp />` component is rendered.
  1. Visit the **Sign In** link and ensure the `<SignIn />` component is rendered. Sign in with your account. You'll be redirected to the home page and the footer will display the **Settings** link and the `<UserButton />` component.
  1. Select the `<UserButton />` component to open the user menu.
  1. Visit the **Settings** link and ensure the `<UserProfile />` component is rendered.
</Steps>


================================================
File: docs/references/chrome-extension/configure-consistent-crx-id.mdx
================================================
---
title: Configure a consistent CRX ID for your Chrome Extension
description: Learn how to configure a consistent CRX ID in your Chrome Extension.
---

Chrome Extensions have a unique CRX ID that rotates by default, which can cause errors with the Clerk integration. This guide demonstrates how to configure a consistent CRX ID so that your extension will have a stable, unchanging key. This guide assumes you are using the Plasmo framework. If you need help applying these concepts to another framework, [contact support](mdc:https:/clerk.com/contact/support).

There are two ways to configure a consistent CRX ID:

1. [For a new extension](mdc:#for-a-new-extension).
1. [For an extension uploaded to the Chrome Developer Dashboard](mdc:#for-an-extension-uploaded-to-the-chrome-developer-dashboard).

> [!WARNING]
> If you followed the [Chrome Extension Quickstart](mdc:docs/quickstarts/chrome-extension), you have already completed this configuration.

## For a new extension

To configure a consistent CRX ID for a new extension, follow these steps:

<Steps>
  ### Generate your keypairs

  1. Visit Plasmo Itero's [Generate Keypairs](mdc:https:/itero.plasmo.com/tools/generate-keypairs) tool.
  1. Select **Generate KeyPairs**.
  1. Save the **Private Key** somewhere secure in case you need it in the future. Save the **Public Key** and the **CRX ID** for the next steps.

  ### Create an `.env.chrome` file to store your public key

  Create an `.env.chrome` file and add your public key to it, as shown in the following example:

  ```env {{ filename: '.env.chrome' }}
  CRX_PUBLIC_KEY="<PUBLIC KEY>"
  ```

  ### Edit your `package.json` to use the new public key

  Plasmo uses the `package.json` to generate a `manifest.json` on build, and allows for the use of environment variables in `package.json`.

  In your `package.json`, in the `manifest` object:

  - Add `"key": "$CRX_PUBLIC_KEY"`.
  - Set the `permissions` array to include `"cookies"` and `"storage"`.
  - Set/update the `host_permissions` array to include `"http://localhost/*"` and `"$CLERK_FRONTEND_API/*"`.

  ```json {{ filename: 'package.json' }}
  {
    // The rest of your package.json file
    "manifest": {
      "key": "$CRX_PUBLIC_KEY",
      "permissions": ["cookies", "storage"],
      "host_permissions": ["http://localhost/*", "$CLERK_FRONTEND_API/*"]
    }
  }
  ```

  ### Verify the CRX ID

  1. Ensure that the development build is updated by running `pnpm dev`.
  1. Open Chrome or a Chromium-based browser and navigate to `chrome://extensions`.
  1. Remove and re-install the extension. To re-install, in the top-left, select **Load unpacked**. Navigate to where your project is located and select the `build/chrome-mv3-dev` folder. Then select **Select**. Your extension will now be loaded and shown in the list of extensions.
  1. Confirm that the ID shown in your extension matches the CRX ID you saved [earlier](mdc:#configure-a-crx-id-for-a-new-extension).
</Steps>

## For an extension uploaded to the Chrome Developer Dashboard

If you have already uploaded a version of your extension to the Chrome Developer Dashboard, follow these steps to configure your extension.

<Steps>
  ### Copy the public key

  1. In the [Chrome Developer Dashboard](mdc:https:/chrome.google.com/webstore/developer/dashboard), select your project.
  1. In the navigation sidebar, select **Package**.
  1. Select **View public key**. A modal will open with your public key.
  1. Copy the string between `-----BEGIN PUBLIC KEY-----` and `-----END PUBLIC KEY-----`.

  ### Create an `.env.chrome` file to store your public key

  Create an `.env.chrome` file and add your public key to it, as shown in the following example:

  ```env {{ filename: '.env.chrome' }}
  CRX_PUBLIC_KEY=<YOUR_PUBLIC_KEY>
  ```

  ### Edit your `package.json` to use the new public key

  Plasmo uses the `package.json` to generate a `manifest.json` on build, and allows for the use of environment variables in `package.json`.

  In your `package.json`, in the `manifest` object:

  - Add `"key": "$CRX_PUBLIC_KEY"`.
  - Set the `permissions` array to include `"cookies"` and `"storage"`.
  - Set/update the `host_permissions` array to include `"http://localhost/*"` and `"$CLERK_FRONTEND_API/*"`.

  ```json {{ filename: 'package.json' }}
  {
    // The rest of your package.json file
    "manifest": {
      "key": "$CRX_PUBLIC_KEY",
      "permissions": ["cookies", "storage"],
      "host_permissions": ["http://localhost/*", "$CLERK_FRONTEND_API/*"]
    }
  }
  ```

  ### Validate the Extension ID

  Verify that your extension has a consistent CRX ID by following these steps:

  1. At the top-left of the Chrome Developer Dashboard, your extension ID will be displayed below the name of your extension.
  1. In a separate tab, open Chrome or a Chromium-based browser and navigate to `chrome://extensions`.
  1. Locate your extension in the list of extensions. Confirm that the ID shown in your extension matches the ID displayed in the Chrome Developer Dashboard.
</Steps>


================================================
File: docs/references/chrome-extension/create-clerk-client.mdx
================================================
---
title: '`createClerkClient()`'
description: "`createClerkClient()` allows Chrome Extension developers to access a user's session information or get a token in a service worker."
---

The `createClerkClient()` helper initializes a new Clerk instance on demand and refreshes the session token if there is a valid, signed-in user. It can be used in a [background service worker](mdc:https:/developer.chrome.com/docs/extensions/develop/concepts/service-workers/basics) to access a user's information or session token.

When a side panel or a popup is closed, the Clerk process that normally refreshes the user's session token every 60 seconds is no longer running, and the stored session will become stale. If a request were made 60 seconds after the side panel or popup was closed, it would fail because the session token is no longer valid. By configuring `createClerkClient()` to run in a background service worker, you can ensure that the user's session is always fresh.

## Usage

The following example:

- Creates a background service worker that sets up an event listener to handle requests from a [content script](mdc:https:/developer.chrome.com/docs/extensions/develop/concepts/content-scripts). If the request wants to interact with Clerk, the listener calls `createClerkClient()` to create a Clerk instance and refresh the session token, and then calls [`getToken()`](mdc:docs/references/javascript/session#get-token) to get the token.
- Adds a link to the home page of the extension that when visited, opens the page as a new tab.
- The new tab has a button on it that, when clicked, triggers the background service worker.

> [!WARNING]
> The following example assumes that you have followed the [Chrome Extension Quickstart](mdc:docs/quickstarts/chrome-extension) and then the [Add React Router](mdc:docs/references/chrome-extension/add-react-router) guide, but you can apply these concepts to your own application.

<Steps>
  ### Create your background service worker

  1. In the `src/` directory, create the `background/` directory.
  1. In the `background/` directory, create the `index.ts` file.
  1. In the `index.ts` file, paste the following code to create an event listener that listens for messages from content scripts and calls a function that uses `createClerkClient()` to get a new token for the user.

  ```typescript {{ filename: 'src/background/index.ts' }}
  import { createClerkClient } from '@clerk/chrome-extension/background'

  const publishableKey = process.env.PLASMO_PUBLIC_CLERK_PUBLISHABLE_KEY

  if (!publishableKey) {
    throw new Error('Please add the PLASMO_PUBLIC_CLERK_PUBLISHABLE_KEY to the .env.development file')
  }

  // Use `createClerkClient()` to create a new Clerk instance
  // and use `getToken()` to get a fresh token for the user
  async function getToken() {
    const clerk = await createClerkClient({
      publishableKey,
    })

    // If there is no valid session, then return null. Otherwise proceed.
    if (!clerk.session) {
      return null
    }

    // Return the user's session
    return await clerk.session?.getToken()
  }

  // Create a listener to listen for messages from content scripts
  // It must return true, in order to keep the connection open and send a response later.
  // NOTE: A runtime listener cannot be async.
  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    // This example sends the token back to the content script
    // but you could also use the token to perform actions on behalf of the user
    getToken()
      .then((token) => sendResponse({ token }))
      .catch((error) => {
        console.error('[Background service worker] Error:', JSON.stringify(error))
        // If there is no token then send a null response
        sendResponse({ token: null })
      })
    return true // REQUIRED: Indicates that the listener responds asynchronously.
  })
  ```

  ### Create the tab with the content script

  1. In the `src/` directory, create the `tabs/` directory.
  1. In the `tabs/` directory, create the `background-worker-demo.html` file.
  1. In the `background-worker-demo.html` file, paste the following code to create a basic HTML file that will house the React component for the content script.
     ```html {{ filename: 'src/tabs/background-worker-demo.html' }}
     <!doctype html>
     <html>
       <head>
         <title>Clerk Background Worker Demo</title>
         <meta charset="utf-8" />
         <meta name="viewport" content="width=device-width, initial-scale=1.0" />
       </head>

       <body></body>
     </html>
     ```
  1. In the `tabs/` directory, create the `background-worker-demo.tsx` file.
  1. In the `background-worker-demo.tsx` file, paste the following code to create a React component with a button that will trigger the background service worker to get the token. If the token is returned, it will be displayed on the page.
     ```tsx {{ filename: 'src/tabs/background-worker-demo.tsx' }}
     import * as React from 'react'

     export default function NewTab() {
       const [token, setToken] = React.useState<string | null>(null)

       const getToken = async (e: React.MouseEvent<HTMLButtonElement>) => {
         e.preventDefault()

         // Trigger the background service worker to get the token
         // and set the token in the state
         chrome.runtime.sendMessage({ greeting: 'get-token' }, (response) => {
           setToken(response.token)
         })
       }

       return (
         <div>
           <p>Clerk Background Worker Demo</p>
           <div className="App">
             <p>
               This new tab simulates a content page where you might want to access user information, or
               make a request to your backend server and include a user token in the request.
             </p>
             <p>Make sure that you are signed into the extension. You can have the popup closed.</p>
             <button type="button" onClick={getToken} className="button invert">
               Get token from service worker
             </button>
             {token && <p>Token: {token}</p>}
           </div>
         </div>
       )
     }
     ```

  ### Add a button to the extension to open the new tab

  Add a button to your Chrome Extension to open the page you created in the previous step as a new tab. This can be added anywhere in your extension. The following example places the button on the home page of the extension.

  ```tsx {{ filename: 'src/popup/routes/home.tsx' }}
  export const Home = () => {
    return (
      <>
        <h1>Clerk + Chrome Extension</h1>
        <button
          onClick={() => {
            chrome.tabs.create({
              url: './tabs/background-worker-demo.html',
            })
          }}
        >
          Open background worker demo in a new tab
        </button>
      </>
    )
  }
  ```

  ### Test the background service worker

  1. Run your project with the following command:
     ```bash {{ filename: 'terminal' }}
     pnpm dev
     ```
  1. In your Chrome browser, open the extension popup and sign in.
  1. Once you've signed in, select the button that you added and a new tab will open.
  1. In the new tab, select the **Get token from service worker** button. The token will be displayed on the page.
</Steps>

## `createClerkClient()` options

The `createClerkClient()` function accepts an optional object. The following options are available:

<Properties>
  - `publishableKey`
  - `string`

  The Clerk Publishable Key for your instance. This can be found on the [**API keys**](mdc:https:/dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

  ---

  - `syncHost?`
  - `string`

  The host to sync the session with. For more information, see [the dedicated guide](mdc:docs/references/chrome-extension/sync-host).
</Properties>


================================================
File: docs/references/chrome-extension/overview.mdx
================================================
---
title: Clerk Chrome Extension SDK
description: The Clerk Chrome Extension SDK gives you access to prebuilt components, React hooks, and helpers to make user authentication easier.
---

The Clerk Chrome Extension SDK gives you access to prebuilt components, React hooks, and helpers to make user authentication easier. Refer to the [quickstart guide](mdc:docs/quickstarts/chrome-extension) to get started.

## Authentication options

When creating your Clerk application in the Clerk Dashboard, your authentication options will depend on how you configure your Chrome Extension. You can configure your Chrome Extension to behave as one of the following:

- **Popup** - Opens as a popup. This is the default behavior.
- **Side Panel** - Opens in a side panel
- **Sync Host** - Deployed alongside a web app that uses [Sync Host](mdc:docs/references/chrome-extension/sync-host).

See the following table to determine the authentication options available for each configuration.

| | Popup | Side Panel | Sync Host |
| - | - | - | - |
| Email + OTP | ✅ | ✅ | ✅ |
| Email + Link | | | ✅ |
| Email + Password | ✅ | ✅ | ✅ |
| Username + Password | ✅ | ✅ | ✅ |
| SMS + OTP | ✅ | ✅ | ✅ |
| OAuth | | | ✅ |
| Google One Tap | | | ✅ |
| SAML | | | ✅ |
| Passkeys | ✅ | ✅ | ✅ |
| Web3 | | | ✅ |

> [!WARNING]
> Our Chrome Extension SDK currently does not fully support Sync Host on side panels. Currently, if a user authenticates in your web app, they need to close and reopen the side panel to update their auth status.

## Sync auth status between your Chrome Extension and web app

Clerk allows you to sync the authentication state from your web app to your Chrome Extension using the Sync Host feature. When a user authenticates in your web app, they will also be authenticated in your Chrome Extension. See [the dedicated guide](mdc:docs/references/chrome-extension/sync-host) for more information.

## `createClerkClient()`

It's recommended to use `createClerkClient()` for Chrome Extension's that need to interact with Clerk in a content script.

The `createClerkClient()` helper initializes a new Clerk instance on demand and refreshes the session token if there is a valid, signed-in user. It can be used in a [content script](mdc:https:/developer.chrome.com/docs/extensions/develop/concepts/content-scripts) or a [background service worker](mdc:https:/developer.chrome.com/docs/extensions/develop/concepts/service-workers/basics) to access a user's information or session token. [Learn more about `createClerkClient()`](mdc:docs/references/chrome-extension/create-clerk-client).

## Add React Router

[Learn how to add React Router to your Chrome Extension](mdc:docs/references/chrome-extension/add-react-router) to enable routing in your application.

## Deploy your extension to production

See [the Chrome Extension deployment guide](mdc:docs/deployments/deploy-chrome-extension) for information about deploying your extension to production.

## Configure a consistent CRX ID

A Chrome Extension can be identified by its unique CRX ID, similar to how a website can be identified by its domain. The CRX ID rotates by default, which can cause errors with the Clerk integration. [Learn how to configure a consistent CRX ID](mdc:docs/references/chrome-extension/configure-consistent-crx-id) so that your extension will have a stable, unchanging key.

## Frequently asked questions (FAQ)

### Can I use Clerk in a content script?

Unfortunately, no. Clerk has strict security restrictions on the allowed origins for requests from the application or extension to Clerk's API. Since a content script could run on any domain, there is no way to enforce origin restrictions.

### Why can't I use OAuth, SAML, or Email Links with the extension popup or side panel?

OAuth and SAML require a redirect back from the Identity Provider (IdP), which is not currently supported in popups or side panels.

Email Links require the popup to remain open while the user checks their email, copies the link, and returns to paste it. Since popups close as soon as a user clicks outside of them, this flow is not possible. The sign-in status resets when the popup closes.

### Why aren't options like Google One Tap or Web3 available in a popup or side panel?

Chrome Extensions can't load code from remote sources. Features like Google One Tap, Web3, and some other authentication options require loading remote code to function. This functionality is removed from the Chrome Extension SDK to ensure extensions using Clerk are not rejected by the Chrome Web Store.


================================================
File: docs/references/chrome-extension/sync-host.mdx
================================================
---
title: Sync auth status between your Chrome Extension and web app
description: Learn how to configure your Chrome Extension to sync user authentication with your web application.
---

Clerk allows you to sync the authentication state from your web app to your Chrome Extension using Clerk's Sync Host feature. When a user authenticates in your web app, they will also be authenticated in your Chrome Extension.

> [!WARNING]
> Our Chrome Extension SDK currently does not fully support Sync Host on side panels. Currently, if a user authenticates in your web app, they need to close and reopen the side panel to update their auth status.

> [!WARNING]
> This guide assumes assumes that you have followed the [Chrome Extension Quickstart](mdc:docs/quickstarts/chrome-extension) and then the [Add React Router](mdc:docs/references/chrome-extension/add-react-router) guide.

<Steps>
  ## Add `PLASMO_PUBLIC_CLERK_SYNC_HOST` to your environment variables

  The `PLASMO_PUBLIC_CLERK_SYNC_HOST` environment variable defines the host that the Chrome Extension will sync with.

  The values for `PLASMO_PUBLIC_CLERK_SYNC_HOST` will differ between development and production environments. Using separate `.env.development` and `.env.production` files allows you to seamlessly pass the appropriate values to your builds.

  Use the following tabs to view the instructions for development versus production instances.

  <Tabs items={["Development", "Production"]}>
    <Tab>
      Add `PLASMO_PUBLIC_CLERK_SYNC_HOST` to your `.env.development` file. The value should be `http://localhost`.

      ```env {{ filename: '.env.development', mark: [3] }}
      PLASMO_PUBLIC_CLERK_PUBLISHABLE_KEY={{pub_key}}
      CLERK_FRONTEND_API=https://{{fapi_url}}
      PLASMO_PUBLIC_CLERK_SYNC_HOST=http://localhost
      ```
    </Tab>

    <Tab>
      Add `PLASMO_PUBLIC_CLERK_SYNC_HOST` to your `.env.production` file. The value should be the domain your web app's production server runs on. For example, `https://clerk.com`.

      ```env {{ filename: '.env.production', mark: [3] }}
      PLASMO_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_live_123
      CLERK_FRONTEND_API=https://yourdomain.com
      PLASMO_PUBLIC_CLERK_SYNC_HOST=https://yourdomain.com
      ```
    </Tab>
  </Tabs>

  ## Add `syncHost` prop to your `<ClerkProvider>`

  Add the `syncHost` prop to your Chrome Extension's `<ClerkProvider>` component. This prop tells the `<ClerkProvider>` which host to sync with.

  ```tsx {{ filename: 'src/popup/layouts/root-layout.tsx', mark: [5, [7, 11], 22] }}
  import { ClerkProvider, SignedIn, SignedOut, UserButton } from '@clerk/chrome-extension'
  import { Link, Outlet, useNavigate } from 'react-router-dom'

  const PUBLISHABLE_KEY = process.env.PLASMO_PUBLIC_CLERK_PUBLISHABLE_KEY
  const SYNC_HOST = process.env.PLASMO_PUBLIC_CLERK_SYNC_HOST

  if (!PUBLISHABLE_KEY || !SYNC_HOST) {
    throw new Error(
      'Please add the PLASMO_PUBLIC_CLERK_PUBLISHABLE_KEY and PLASMO_PUBLIC_CLERK_SYNC_HOST to the .env.development file',
    )
  }

  export const RootLayout = () => {
    const navigate = useNavigate()

    return (
      <ClerkProvider
        routerPush={(to) => navigate(to)}
        routerReplace={(to) => navigate(to, { replace: true })}
        publishableKey={PUBLISHABLE_KEY}
        afterSignOutUrl="/"
        syncHost={SYNC_HOST}
      >
        <div className="plasmo-w-[785px] plasmo-h-[600px]">
          <main>
            <Outlet />
          </main>
          <footer>
            <SignedIn>
              <Link to="/settings">Settings</Link>
              <UserButton />
            </SignedIn>
            <SignedOut>
              <Link to="/">Home</Link>
              <Link to="/sign-in">Sign In</Link>
              <Link to="/sign-up">Sign Up</Link>
            </SignedOut>
          </footer>
        </div>
      </ClerkProvider>
    )
  }
  ```

  ### Hide unsupported authentication methods

  When using the Sync Host feature, authentication methods that you want to use in your web app [may not be fully supported in the Chrome Extension environment](mdc:docs/references/chrome-extension/overview#authentication-options). To hide unsupported methods in your Chrome Extension, you can use the [`appearance`](mdc:https:/clerk.com/docs/customization/overview) prop with your extension's `<SignUp>` and `<SignIn>` components as demonstrated in the following examples.

  <CodeBlockTabs options={["<SignUp>", "<SignIn>"]}>
    ```tsx {{ filename: 'src/popup/pages/sign-up.tsx', mark: [[3, 7]] }}
    <SignUp
      appearance={{
        elements: {
          socialButtonsRoot: 'plasmo-hidden',
          dividerRow: 'plasmo-hidden',
        },
      }}
    />
    ```

    ```tsx {{ filename: 'src/popup/pages/sign-in.tsx', mark: [[3, 7]] }}
    <SignIn
      appearance={{
        elements: {
          socialButtonsRoot: 'plasmo-hidden',
          dividerRow: 'plasmo-hidden',
        },
      }}
    />
    ```
  </CodeBlockTabs>

  ## Configure `host_permissions`

  `host_permissions` specifies which hosts, or websites, will have permission to sync auth state with your app. It accepts an array, allowing you to add more than one host.

  In the `package.json` file, in the `manifest` object, update the `host_permissions` array. Remove `http://localhost/*` and replace with `$PLASMO_PUBLIC_CLERK_SYNC_HOST/*`, as shown in the following example:

  ```json {{ filename: 'package.json', mark: [6] }}
  {
    // The rest of your package.json file
    "manifest": {
      "key": "$CRX_PUBLIC_KEY",
      "permissions": ["cookies", "storage"],
      "host_permissions": ["$PLASMO_PUBLIC_CLERK_SYNC_HOST/*", "$CLERK_FRONTEND_API/*"]
    }
  }
  ```

  ## Add the Extension's ID to your web app's `allowed_origins`

  To allow your Chrome Extension to sync with your web app, you must add the extension's ID to your web app's `allowed_origins`.

  > [!NOTE]
  > If you have not [configured a consistent key](mdc:docs/references/chrome-extension/configure-consistent-crx-id), you will have to repeat this step every time your extension's ID changes.

  1. In the Clerk Dashboard, navigate to the [**API keys**](mdc:https:/dashboard.clerk.com/last-active?path=api-keys) page.
  1. Copy your Secret Key. It should start with `sk_test_` or `sk_live_` for your development and production instances, respectively.
  1. In your terminal, paste the following command. Replace `YOUR_SECRET_KEY` with your Clerk Secret Key and the `<CHROME_EXTENSION_KEY>` with your extension's ID.

  The final result should resemble the following:

  ```bash {{ filename: 'terminal' }}
  curl -X PATCH https://api.clerk.com/v1/instance \
    -H "Authorization: Bearer {{secret}}" \
    -H "Content-type: application/json" \
    -d '{"allowed_origins": ["chrome-extension://<CHROME_EXTENSION_ID>"]}'
  ```
</Steps>


